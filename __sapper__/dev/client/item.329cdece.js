import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as svg_element, f as claim_element, g as children, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as noop, w as writable, p as derived, r as validate_store, u as component_subscribe, e as element, x as null_to_empty, y as toggle_class, z as listen_dev, A as create_component, B as claim_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, G as empty, H as HtmlTag, I as validate_each_argument, t as text, h as claim_text, J as set_data_dev, a as space, c as claim_space, K as run_all, L as destroy_each, M as group_outros, N as check_outros, O as onMount, P as set_style, Q as create_slot, R as onDestroy, T as update_slot, U as createEventDispatcher, V as prop_dev, W as binding_callbacks, X as bind, Y as prevent_default, Z as add_flush_callback, _ as is_function, q as query_selector_all } from './client.4bb4aa6f.js';

/* node_modules\svelte-feather-icons\src\icons\EditIcon.svelte generated by Svelte v3.36.0 */

const file$c = "node_modules\\svelte-feather-icons\\src\\icons\\EditIcon.svelte";

function create_fragment$c(ctx) {
	let svg;
	let path0;
	let path1;
	let svg_class_value;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					fill: true,
					viewBox: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);
			path1 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7");
			add_location(path0, file$c, 13, 241, 527);
			attr_dev(path1, "d", "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z");
			add_location(path1, file$c, 13, 317, 603);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", /*size*/ ctx[0]);
			attr_dev(svg, "height", /*size*/ ctx[0]);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", svg_class_value = "feather feather-edit " + /*customClass*/ ctx[2]);
			add_location(svg, file$c, 13, 0, 286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*size*/ 1) {
				attr_dev(svg, "width", /*size*/ ctx[0]);
			}

			if (dirty & /*size*/ 1) {
				attr_dev(svg, "height", /*size*/ ctx[0]);
			}

			if (dirty & /*strokeWidth*/ 2) {
				attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			}

			if (dirty & /*customClass*/ 4 && svg_class_value !== (svg_class_value = "feather feather-edit " + /*customClass*/ ctx[2])) {
				attr_dev(svg, "class", svg_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("EditIcon", slots, []);
	let { size = "100%" } = $$props;
	let { strokeWidth = 2 } = $$props;
	let { class: customClass = "" } = $$props;

	if (size !== "100%") {
		size = size.slice(-1) === "x"
		? size.slice(0, size.length - 1) + "em"
		: parseInt(size) + "px";
	}

	const writable_props = ["size", "strokeWidth", "class"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<EditIcon> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("class" in $$props) $$invalidate(2, customClass = $$props.class);
	};

	$$self.$capture_state = () => ({ size, strokeWidth, customClass });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("customClass" in $$props) $$invalidate(2, customClass = $$props.customClass);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [size, strokeWidth, customClass];
}

class EditIcon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$c, create_fragment$c, safe_not_equal, { size: 0, strokeWidth: 1, class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "EditIcon",
			options,
			id: create_fragment$c.name
		});
	}

	get size() {
		throw new Error("<EditIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<EditIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get strokeWidth() {
		throw new Error("<EditIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set strokeWidth(value) {
		throw new Error("<EditIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<EditIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<EditIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-feather-icons\src\icons\Trash2Icon.svelte generated by Svelte v3.36.0 */

const file$b = "node_modules\\svelte-feather-icons\\src\\icons\\Trash2Icon.svelte";

function create_fragment$b(ctx) {
	let svg;
	let polyline;
	let path;
	let line0;
	let line1;
	let svg_class_value;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polyline = svg_element("polyline");
			path = svg_element("path");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					width: true,
					height: true,
					fill: true,
					viewBox: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			polyline = claim_element(svg_nodes, "polyline", { points: true }, 1);
			children(polyline).forEach(detach_dev);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			line0 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line0).forEach(detach_dev);
			line1 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(polyline, "points", "3 6 5 6 21 6");
			add_location(polyline, file$b, 13, 244, 530);
			attr_dev(path, "d", "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2");
			add_location(path, file$b, 13, 287, 573);
			attr_dev(line0, "x1", "10");
			attr_dev(line0, "y1", "11");
			attr_dev(line0, "x2", "10");
			attr_dev(line0, "y2", "17");
			add_location(line0, file$b, 13, 383, 669);
			attr_dev(line1, "x1", "14");
			attr_dev(line1, "y1", "11");
			attr_dev(line1, "x2", "14");
			attr_dev(line1, "y2", "17");
			add_location(line1, file$b, 13, 428, 714);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", /*size*/ ctx[0]);
			attr_dev(svg, "height", /*size*/ ctx[0]);
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", svg_class_value = "feather feather-trash-2 " + /*customClass*/ ctx[2]);
			add_location(svg, file$b, 13, 0, 286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polyline);
			append_dev(svg, path);
			append_dev(svg, line0);
			append_dev(svg, line1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*size*/ 1) {
				attr_dev(svg, "width", /*size*/ ctx[0]);
			}

			if (dirty & /*size*/ 1) {
				attr_dev(svg, "height", /*size*/ ctx[0]);
			}

			if (dirty & /*strokeWidth*/ 2) {
				attr_dev(svg, "stroke-width", /*strokeWidth*/ ctx[1]);
			}

			if (dirty & /*customClass*/ 4 && svg_class_value !== (svg_class_value = "feather feather-trash-2 " + /*customClass*/ ctx[2])) {
				attr_dev(svg, "class", svg_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Trash2Icon", slots, []);
	let { size = "100%" } = $$props;
	let { strokeWidth = 2 } = $$props;
	let { class: customClass = "" } = $$props;

	if (size !== "100%") {
		size = size.slice(-1) === "x"
		? size.slice(0, size.length - 1) + "em"
		: parseInt(size) + "px";
	}

	const writable_props = ["size", "strokeWidth", "class"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Trash2Icon> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("class" in $$props) $$invalidate(2, customClass = $$props.class);
	};

	$$self.$capture_state = () => ({ size, strokeWidth, customClass });

	$$self.$inject_state = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("strokeWidth" in $$props) $$invalidate(1, strokeWidth = $$props.strokeWidth);
		if ("customClass" in $$props) $$invalidate(2, customClass = $$props.customClass);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [size, strokeWidth, customClass];
}

class Trash2Icon extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$b, create_fragment$b, safe_not_equal, { size: 0, strokeWidth: 1, class: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Trash2Icon",
			options,
			id: create_fragment$b.name
		});
	}

	get size() {
		throw new Error("<Trash2Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Trash2Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get strokeWidth() {
		throw new Error("<Trash2Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set strokeWidth(value) {
		throw new Error("<Trash2Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<Trash2Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Trash2Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const createOptions = () => {
    const {subscribe, set } = writable({
        sortable: true,
        pagination: true,
        rowPerPage: 50,
        columnFilter: false,
        scrollY: true,
        css: true,
        labels: {
            search: 'Search...',
            filter: 'Filter',
            noRows: 'No entries to found',
            info: 'Showing {start} to {end} of {rows} entries',
            previous: 'Previous',
            next: 'Next',
        },
        blocks: {
            searchInput: true, 
            paginationButtons: true,
            paginationRowCount: true,
        }
    });
    return {
        subscribe, set, 
        get: () => {
            let $store;
            options.subscribe(store => $store = store);
            return $store
        },
        update: (opt) => {
            opt.labels = opt.labels ? opt.labels : {};
            const labels = {
                search:   typeof opt.labels.search   === 'string' ? opt.labels.search   : 'Search...',
                filter:   typeof opt.labels.filter   === 'string' ? opt.labels.filter   : 'Filter',
                noRows:   typeof opt.labels.noRows   === 'string' ? opt.labels.noRows   : 'No entries to found',
                info:     typeof opt.labels.info     === 'string' ? opt.labels.info     : 'Showing {start} to {end} of {rows} entries',
                previous: typeof opt.labels.previous === 'string' ? opt.labels.previous : 'Previous',
                next:     typeof opt.labels.next     === 'string' ? opt.labels.next     : 'Next',                
            };   
            opt.blocks = opt.blocks ? opt.blocks : {};
            const blocks = {
                searchInput:        typeof opt.blocks.searchInput        === 'boolean' ? opt.blocks.searchInput        : true, 
                paginationButtons:  typeof opt.blocks.paginationButtons  === 'boolean' ? opt.blocks.paginationButtons  : true,
                paginationRowCount: typeof opt.blocks.paginationRowCount === 'boolean' ? opt.blocks.paginationRowCount : true,
            };
            const parsed = {
                sortable:     typeof opt.sortable     === 'boolean' ? opt.sortable     : true,
                pagination:   typeof opt.pagination   === 'boolean' ? opt.pagination   : true,
                rowPerPage:   typeof opt.rowPerPage   === 'number'  ? opt.rowPerPage   : 50,
                columnFilter: typeof opt.columnFilter === 'boolean' ? opt.columnFilter : false, 
                scrollY:      typeof opt.scrollY      === 'boolean' ? opt.scrollY      : true, 
                css:          typeof opt.css          === 'boolean' ? opt.css          : true, 
                labels: labels,
                blocks: blocks
            };
            options.set(parsed);
        }
    }
};
const options = createOptions();

const rowCount = writable(0);

const createPageNumber = () => {
	const { subscribe, update } = writable(1);
	return {
		subscribe, update,
		set: (number) => update(store => {
			let $rowPerPage, $rowCount;
			rowCount.subscribe(store => $rowCount = store);
			options.subscribe(store => $rowPerPage = store.rowPerPage);
			if ( number >= 1 && number <= Math.ceil($rowCount / $rowPerPage) ) {
				store = parseInt(number);
			}
			document.querySelector('section.datatable .dt-table').scrollTop = 0;
			return store
		})
	}
};
const pageNumber = createPageNumber();

const datatableWidth = writable(null);

const createLocal = () => {
	const { subscribe, update } = writable([]);
	return {
		subscribe, update,
		add: (key, value) => update(store => {
			const filter = {key: key, value: value}; 
			store = store.filter(item => { return item.key !== key && item.value.length > 0 });
			store.push(filter);
			return store
		}),
		remove: () => update(store => [])
	}
};
const local = createLocal();

const createGlobal = () => {
	const { subscribe, update } = writable(null);
	return {
		subscribe, 
		set: (value) => update(store => {
			store = (value.length > 0) ? value : null;
			return store
		}),
		remove: () => update(store => null)
	}
};
const global = createGlobal();

const createData = () => {
	const { subscribe, set, update } = writable([]);
	return {
		subscribe, set,
		sortAsc: (key) => update(store => {
			try {
				store.sort( (a, b) => key(b).localeCompare(key(a)) );
			} catch (e) {
				return store.sort( (a, b) => parseFloat(key(b)) - parseFloat(key(a)))
			}
			return store.sort( (a, b) => key(b).localeCompare(key(a)) )
			
		}),
		sortDesc: (key) => update(store => {
			try {
				store.sort( (a, b) => key(a).localeCompare(key(b)) );
			} catch (e) {
				return store.sort( (a, b) => parseFloat(key(a)) - parseFloat(key(b)))
			}
			return store.sort( (a, b) => key(a).localeCompare(key(b)) )
		}),
	}
};
const data = createData();

const filtered = derived(
	[data, global, local],
    ([$data, $global, $local]) => {
		if ($global) {
			$data = $data.filter( item => {
				return Object.keys(item).some( k => {
					return item[k].toString().toLowerCase().indexOf($global.toString().toLowerCase()) > -1
				})
			});
		}
		if ($local.length > 0) {
			$local.forEach(filter => {
				return $data = $data.filter( item => filter.key(item).toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) > -1)
			});
		}
		rowCount.set($data.length);
		return $data
	} 	
);

const rows = derived(
	[filtered, options, pageNumber],
    ([$filtered, $options, $pageNumber]) => {
		if (!$options.pagination) {
			return $filtered
		}
		return $filtered.slice( ($pageNumber - 1) * $options.rowPerPage, $pageNumber * $options.rowPerPage) 
	} 
);

const createColumns = () => {
	const { subscribe, set, update } = writable([]);
	return {
		subscribe, set, update,
		get: () => {
			let $columns;
			columns.subscribe(store => $columns = store);
			return $columns
		},
		sort: (element, key) => {
			if (options.get().sortable !== true || typeof key === 'undefined') {
				return
			}
			if (
				element.classList.contains('sortable') &&
				element.classList.contains('asc')
			) {
				Array.from(element.parentNode.children).forEach((item) =>
					item.classList.remove('asc', 'desc')
				);
				element.classList.add('desc');
				data.sortDesc(key);
				pageNumber.set(1);
			} else {
				Array.from(element.parentNode.children).forEach((item) =>
					item.classList.remove('desc', 'asc')
				);
				element.classList.add('asc');
				data.sortAsc(key);
				pageNumber.set(1);
			}
			columns.redraw();
		},
		filter: (key, value) => {
			pageNumber.set(1);
			local.add(key, value);
			columns.redraw();
		},
		draw: () => {
			setTimeout(() => {
				const tbody = document.querySelector('.datatable table tbody tr');
				if (tbody === null) return
				const thead = document.querySelectorAll('.dt-header thead tr');
				const $columns = columns.get();
				thead.forEach(tr => {
					let i = 0;
					Array.from(tbody.children).forEach(td => {
						let th = tr.children[i];
						let thW = th.getBoundingClientRect().width;
						let tdW = td.getBoundingClientRect().width;
						// let columnMinWidth = parseFloat(columns.get()[i].minWidth.replace('px', ''))
						if (tdW > thW) { 
							th.style.minWidth = tdW + 'px';
							th.style.maxWidth = tdW + 'px';
							$columns[i].minWidth = tdW;
						}
						else {
							td.style.minWidth = thW + 'px';
							td.style.maxWidth = thW + 'px';
							$columns[i].minWidth = thW;
						} 
						i++;
					});
				});
			}, 50);	
		},
		redraw: () => {
			if ( options.get().scrollY === false ) {
				return
			}
			setTimeout(() => {
				const tbody = document.querySelector('.datatable table tbody tr');
				if (tbody === null) return
				const thead = document.querySelectorAll('.dt-header thead tr');
				thead.forEach(tr => {
					let i = 0;
					Array.from(tbody.children).forEach(td => {
						let th = tr.children[i];
						let thW = th.getBoundingClientRect().width;
						let tdW = td.getBoundingClientRect().width;
						let columnMinWidth = parseFloat(columns.get()[i].minWidth);
						if (tdW > thW || thW > columnMinWidth) { 
							th.style.minWidth = tdW + 'px';
							th.style.maxWidth = tdW + 'px';
						}
						else {
							td.style.minWidth = thW + 'px';
							td.style.maxWidth = thW + 'px';
						} 
						i++;
					});
				});
			}, 50);			
		},
	}
};
const columns = createColumns();

const datatable = {
    init: () => {
        datatable.resize();
        datatable.addEventScrollX();
        datatable.getColumns();
        new ResizeObserver((mutations) => {
            datatable.resize();
        }).observe(document.querySelector('section.datatable').parentElement);
    },
    reset: () => {
        pageNumber.update(store => 1);
        global.remove();
        local.remove();
        columns.set([]);
    },
    setRows: (arr) => {
        arr.forEach( (item) => {
            Object.keys(item).forEach( (k) => {
                if (item[k] === null) {
                    item[k] = '';
                }
            });
        });
        data.set(arr);
        return
    },
    getSize: () => {
        const parent = document.querySelector('section.datatable').parentNode;
        const style = getComputedStyle(parent);
        const rect = parent.getBoundingClientRect();
        const getNumber = (pxValue) => { return parseFloat(pxValue.replace('px', ''))  }; 
        return {
            parentWidth: rect.width,
            parentHeight: rect.height,
            width: (rect.width - getNumber(style.paddingLeft) - getNumber(style.paddingRight) - getNumber(style.borderLeftWidth) - getNumber(style.borderRightWidth)) / rect.width,
            height: (rect.height - getNumber(style.paddingTop) - getNumber(style.paddingBottom) - getNumber(style.borderTopWidth) - getNumber(style.borderBottomWidth)) / rect.height,
            top: style.paddingTop,
            right: style.paddingRight,
            bottom: style.paddingBottom,
            left: style.paddingLeft
        }
    },
    resize: () => {
        if ( !document.querySelector('section.datatable') ) return
        const size = datatable.getSize();
        const tableContainer = document.querySelector('section.datatable .dt-table');
        if ( options.get().scrollY ) {
            tableContainer.style.height = datatable.getTableContainerHeight(size.parentHeight * size.height) + 'px';
            columns.redraw();
        }
        datatableWidth.set( size.parentWidth * size.width );
        if (size.parentWidth * size.width < document.querySelector('section.datatable table').offsetWidth) {
            tableContainer.style.overflowX = 'auto';
        }
    },
    getTableContainerHeight: (height) => {
        let paginationBlock;
        if (options.get().pagination && (options.get().blocks.paginationButtons || options.get().blocks.paginationRowCount)) {
            paginationBlock = true;
        }
        const calc = [
            (options.get().blocks.searchInput) ? document.querySelector('.datatable .dt-search').getBoundingClientRect().height : 0,
            (paginationBlock) ? document.querySelector('.datatable .dt-pagination').getBoundingClientRect().height : 0
        ];
        const sum = (a, b) => a + b;
        document.querySelector('section.datatable .dt-table').style.height = height - calc.reduce(sum) + 'px';
    },
    addEventScrollX: () => {
        if ( options.get().scrollY ) {
            document.querySelector('section.datatable .dt-table').addEventListener('scroll', (e) => {
                document.querySelector('.dt-header').style.left = (-1 * e.target.scrollLeft) + 'px';
            });
        }
    },
    getColumns: () => {
        const columnList = [];
        let i = 0;
        document.querySelectorAll('.datatable table thead th').forEach(th => {
            columnList.push({
                index: i,
                html: th.innerHTML,
                key: datatable.getKey(th.dataset.key),
                sort: null,
                classList: th.classList,
                minWidth: th.getBoundingClientRect().width
            });
            th.addEventListener('click', (e) => {
                columns.sort(e.target, datatable.getKey(th.dataset.key));
            }, true);
            i++;
        });
        columns.set(columnList);
    },
    getKey: (key) => {
        if (!key)  return 
        if (key && key.indexOf('=>') > 0) {
            return new Function(`'use strict';return (${key})`)()
        }
        return (x) => x[key]
    },
};

/* node_modules\svelte-simple-datatables\src\SearchInput.svelte generated by Svelte v3.36.0 */
const file$a = "node_modules\\svelte-simple-datatables\\src\\SearchInput.svelte";

function create_fragment$a(ctx) {
	let input;
	let input_class_value;
	let input_placeholder_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				class: true,
				type: true,
				placeholder: true,
				ref: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "class", input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1kn6xvh"));
			attr_dev(input, "type", "text");
			attr_dev(input, "placeholder", input_placeholder_value = /*$options*/ ctx[2].labels.search);
			attr_dev(input, "ref", /*ref*/ ctx[0]);
			toggle_class(input, "css", /*$options*/ ctx[2].css);
			add_location(input, file$a, 14, 0, 403);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_handler*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*classList*/ 2 && input_class_value !== (input_class_value = "" + (null_to_empty(/*classList*/ ctx[1]) + " svelte-1kn6xvh"))) {
				attr_dev(input, "class", input_class_value);
			}

			if (dirty & /*$options*/ 4 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[2].labels.search)) {
				attr_dev(input, "placeholder", input_placeholder_value);
			}

			if (dirty & /*ref*/ 1) {
				attr_dev(input, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 6) {
				toggle_class(input, "css", /*$options*/ ctx[2].css);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	let $options;
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(2, $options = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SearchInput", slots, []);
	let { ref = "" } = $$props;
	let { classList = "" } = $$props;

	const search = value => {
		pageNumber.set(1);
		global.set(value);
		columns.redraw();
	};

	const writable_props = ["ref", "classList"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SearchInput> was created with unknown prop '${key}'`);
	});

	const input_handler = e => search(e.target.value);

	$$self.$$set = $$props => {
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("classList" in $$props) $$invalidate(1, classList = $$props.classList);
	};

	$$self.$capture_state = () => ({
		options,
		pageNumber,
		columns,
		global,
		ref,
		classList,
		search,
		$options
	});

	$$self.$inject_state = $$props => {
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("classList" in $$props) $$invalidate(1, classList = $$props.classList);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [ref, classList, $options, search, input_handler];
}

class SearchInput extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { ref: 0, classList: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SearchInput",
			options,
			id: create_fragment$a.name
		});
	}

	get ref() {
		throw new Error("<SearchInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<SearchInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classList() {
		throw new Error("<SearchInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classList(value) {
		throw new Error("<SearchInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-simple-datatables\src\components\Search.svelte generated by Svelte v3.36.0 */
const file$9 = "node_modules\\svelte-simple-datatables\\src\\components\\Search.svelte";

function create_fragment$9(ctx) {
	let section;
	let searchinput;
	let current;
	searchinput = new SearchInput({ $$inline: true });

	const block = {
		c: function create() {
			section = element("section");
			create_component(searchinput.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			claim_component(searchinput.$$.fragment, section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "dt-search svelte-11nchoy");
			toggle_class(section, "css", /*$options*/ ctx[0].css);
			add_location(section, file$9, 5, 0, 128);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			mount_component(searchinput, section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$options*/ 1) {
				toggle_class(section, "css", /*$options*/ ctx[0].css);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(searchinput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(searchinput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(searchinput);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let $options;
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Search", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Search> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ SearchInput, options, $options });
	return [$options];
}

class Search extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Search",
			options,
			id: create_fragment$9.name
		});
	}
}

/* node_modules\svelte-simple-datatables\src\PaginationRowCount.svelte generated by Svelte v3.36.0 */
const file$8 = "node_modules\\svelte-simple-datatables\\src\\PaginationRowCount.svelte";

// (19:4) {:else}
function create_else_block_1(ctx) {
	let html_tag;
	let raw_value = `<b>${/*start*/ ctx[0]}</b>-<b>${/*end*/ ctx[2]}</b>/<b>${/*rows*/ ctx[3]}</b>` + "";
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*start, end, rows*/ 13 && raw_value !== (raw_value = `<b>${/*start*/ ctx[0]}</b>-<b>${/*end*/ ctx[2]}</b>/<b>${/*rows*/ ctx[3]}</b>` + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(19:4) {:else}",
		ctx
	});

	return block;
}

// (13:4) {#if $datatableWidth > 600}
function create_if_block$6(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*rows*/ ctx[3] > 0) return create_if_block_1$5;
		return create_else_block$4;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(13:4) {#if $datatableWidth > 600}",
		ctx
	});

	return block;
}

// (16:8) {:else}
function create_else_block$4(ctx) {
	let html_tag;
	let raw_value = /*$options*/ ctx[1].labels.noRows + "";
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$options*/ 2 && raw_value !== (raw_value = /*$options*/ ctx[1].labels.noRows + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$4.name,
		type: "else",
		source: "(16:8) {:else}",
		ctx
	});

	return block;
}

// (14:8) {#if rows > 0}
function create_if_block_1$5(ctx) {
	let html_tag;
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(/*info*/ ctx[4], target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*info*/ 16) html_tag.p(/*info*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$5.name,
		type: "if",
		source: "(14:8) {#if rows > 0}",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let aside;

	function select_block_type(ctx, dirty) {
		if (/*$datatableWidth*/ ctx[5] > 600) return create_if_block$6;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			aside = element("aside");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			aside = claim_element(nodes, "ASIDE", { class: true });
			var aside_nodes = children(aside);
			if_block.l(aside_nodes);
			aside_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(aside, "class", "dt-pagination-rowcount svelte-jt0h2f");
			toggle_class(aside, "css", /*$options*/ ctx[1].css);
			add_location(aside, file$8, 11, 0, 470);
		},
		m: function mount(target, anchor) {
			insert_dev(target, aside, anchor);
			if_block.m(aside, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(aside, null);
				}
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(aside, "css", /*$options*/ ctx[1].css);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(aside);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$8($$self, $$props, $$invalidate) {
	let start;
	let end;
	let rows;
	let info;
	let $pageNumber;
	let $options;
	let $rowCount;
	let $datatableWidth;
	validate_store(pageNumber, "pageNumber");
	component_subscribe($$self, pageNumber, $$value => $$invalidate(6, $pageNumber = $$value));
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	validate_store(rowCount, "rowCount");
	component_subscribe($$self, rowCount, $$value => $$invalidate(7, $rowCount = $$value));
	validate_store(datatableWidth, "datatableWidth");
	component_subscribe($$self, datatableWidth, $$value => $$invalidate(5, $datatableWidth = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PaginationRowCount", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PaginationRowCount> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		options,
		pageNumber,
		rowCount,
		datatableWidth,
		start,
		$pageNumber,
		$options,
		end,
		$rowCount,
		rows,
		info,
		$datatableWidth
	});

	$$self.$inject_state = $$props => {
		if ("start" in $$props) $$invalidate(0, start = $$props.start);
		if ("end" in $$props) $$invalidate(2, end = $$props.end);
		if ("rows" in $$props) $$invalidate(3, rows = $$props.rows);
		if ("info" in $$props) $$invalidate(4, info = $$props.info);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$pageNumber, $options*/ 66) {
			$$invalidate(0, start = $pageNumber * $options.rowPerPage - $options.rowPerPage + 1);
		}

		if ($$self.$$.dirty & /*$pageNumber, $options, $rowCount*/ 194) {
			$$invalidate(2, end = Math.min($pageNumber * $options.rowPerPage, $rowCount));
		}

		if ($$self.$$.dirty & /*$rowCount*/ 128) {
			$$invalidate(3, rows = $rowCount);
		}

		if ($$self.$$.dirty & /*$options, start, end, rows*/ 15) {
			$$invalidate(4, info = $options.labels.info.replace("{start}", `<b>${start}</b>`).replace("{end}", `<b>${end}</b>`).replace("{rows}", `<b>${rows}</b>`));
		}
	};

	return [start, $options, end, rows, info, $datatableWidth, $pageNumber, $rowCount];
}

class PaginationRowCount extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PaginationRowCount",
			options,
			id: create_fragment$8.name
		});
	}
}

/* node_modules\svelte-simple-datatables\src\PaginationButtons.svelte generated by Svelte v3.36.0 */
const file$7 = "node_modules\\svelte-simple-datatables\\src\\PaginationButtons.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

// (70:0) {:else}
function create_else_block$3(ctx) {
	let section;
	let button0;
	let t0;
	let t1;
	let button1;
	let t2;
	let t3;
	let button2;
	let t4;
	let t5;
	let button3;
	let t6;
	let section_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			section = element("section");
			button0 = element("button");
			t0 = text("❬❬");
			t1 = space();
			button1 = element("button");
			t2 = text("❮");
			t3 = space();
			button2 = element("button");
			t4 = text("❯");
			t5 = space();
			button3 = element("button");
			t6 = text("❭❭");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			button0 = claim_element(section_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t0 = claim_text(button0_nodes, "❬❬");
			button0_nodes.forEach(detach_dev);
			t1 = claim_space(section_nodes);
			button1 = claim_element(section_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t2 = claim_text(button1_nodes, "❮");
			button1_nodes.forEach(detach_dev);
			t3 = claim_space(section_nodes);
			button2 = claim_element(section_nodes, "BUTTON", { class: true });
			var button2_nodes = children(button2);
			t4 = claim_text(button2_nodes, "❯");
			button2_nodes.forEach(detach_dev);
			t5 = claim_space(section_nodes);
			button3 = claim_element(section_nodes, "BUTTON", { class: true });
			var button3_nodes = children(button3);
			t6 = claim_text(button3_nodes, "❭❭");
			button3_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button0, "class", "svelte-9qvh1i");
			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[4] === 1);
			add_location(button0, file$7, 71, 8, 2390);
			attr_dev(button1, "class", "svelte-9qvh1i");
			toggle_class(button1, "disabled", /*$pageNumber*/ ctx[4] === 1);
			add_location(button1, file$7, 72, 8, 2496);
			attr_dev(button2, "class", "svelte-9qvh1i");
			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			add_location(button2, file$7, 73, 8, 2608);
			attr_dev(button3, "class", "svelte-9qvh1i");
			toggle_class(button3, "disabled", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			add_location(button3, file$7, 74, 8, 2736);
			attr_dev(section, "class", section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-9qvh1i");
			toggle_class(section, "css", /*$options*/ ctx[3].css);
			add_location(section, file$7, 70, 4, 2297);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, button0);
			append_dev(button0, t0);
			append_dev(section, t1);
			append_dev(section, button1);
			append_dev(button1, t2);
			append_dev(section, t3);
			append_dev(section, button2);
			append_dev(button2, t4);
			append_dev(section, t5);
			append_dev(section, button3);
			append_dev(button3, t6);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler_5*/ ctx[14], false, false, false),
					listen_dev(button1, "click", /*click_handler_6*/ ctx[15], false, false, false),
					listen_dev(button2, "click", /*click_handler_7*/ ctx[16], false, false, false),
					listen_dev(button3, "click", /*click_handler_8*/ ctx[17], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$pageNumber*/ 16) {
				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[4] === 1);
			}

			if (dirty & /*$pageNumber*/ 16) {
				toggle_class(button1, "disabled", /*$pageNumber*/ ctx[4] === 1);
			}

			if (dirty & /*$pageNumber, pageCount*/ 20) {
				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*$pageNumber, pageCount*/ 20) {
				toggle_class(button3, "disabled", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons mobile " + /*classList*/ ctx[1] + " svelte-9qvh1i")) {
				attr_dev(section, "class", section_class_value);
			}

			if (dirty & /*classList, $options*/ 10) {
				toggle_class(section, "css", /*$options*/ ctx[3].css);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$3.name,
		type: "else",
		source: "(70:0) {:else}",
		ctx
	});

	return block;
}

// (25:0) {#if $datatableWidth > 600}
function create_if_block$5(ctx) {
	let section;
	let button0;
	let raw0_value = /*$options*/ ctx[3].labels.previous + "";
	let t0;
	let button1;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let button2;
	let raw1_value = /*$options*/ ctx[3].labels.next + "";
	let section_class_value;
	let mounted;
	let dispose;
	let if_block0 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[4] >= 5 && create_if_block_4(ctx);
	let each_value = /*buttons*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	let if_block1 = /*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[4] <= /*pageCount*/ ctx[2].length - 3 && create_if_block_2$3(ctx);
	let if_block2 = /*pageCount*/ ctx[2].length > 1 && create_if_block_1$4(ctx);

	const block = {
		c: function create() {
			section = element("section");
			button0 = element("button");
			t0 = space();
			button1 = element("button");
			t1 = text("1");
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			button2 = element("button");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true, ref: true });
			var section_nodes = children(section);
			button0 = claim_element(section_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			button0_nodes.forEach(detach_dev);
			t0 = claim_space(section_nodes);
			button1 = claim_element(section_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t1 = claim_text(button1_nodes, "1");
			button1_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			if (if_block0) if_block0.l(section_nodes);
			t3 = claim_space(section_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(section_nodes);
			}

			t4 = claim_space(section_nodes);
			if (if_block1) if_block1.l(section_nodes);
			t5 = claim_space(section_nodes);
			if (if_block2) if_block2.l(section_nodes);
			t6 = claim_space(section_nodes);
			button2 = claim_element(section_nodes, "BUTTON", { class: true });
			var button2_nodes = children(button2);
			button2_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button0, "class", "text svelte-9qvh1i");
			toggle_class(button0, "disabled", /*$pageNumber*/ ctx[4] === 1);
			add_location(button0, file$7, 26, 8, 905);
			attr_dev(button1, "class", "svelte-9qvh1i");
			toggle_class(button1, "active", /*$pageNumber*/ ctx[4] === 1);
			add_location(button1, file$7, 33, 8, 1128);
			attr_dev(button2, "class", "text svelte-9qvh1i");
			toggle_class(button2, "disabled", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			add_location(button2, file$7, 61, 8, 2042);
			attr_dev(section, "class", section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-9qvh1i");
			attr_dev(section, "ref", /*ref*/ ctx[0]);
			toggle_class(section, "css", /*$options*/ ctx[3].css);
			add_location(section, file$7, 25, 4, 813);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, button0);
			button0.innerHTML = raw0_value;
			append_dev(section, t0);
			append_dev(section, button1);
			append_dev(button1, t1);
			append_dev(section, t2);
			if (if_block0) if_block0.m(section, null);
			append_dev(section, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(section, null);
			}

			append_dev(section, t4);
			if (if_block1) if_block1.m(section, null);
			append_dev(section, t5);
			if (if_block2) if_block2.m(section, null);
			append_dev(section, t6);
			append_dev(section, button2);
			button2.innerHTML = raw1_value;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[10], false, false, false),
					listen_dev(button2, "click", /*click_handler_4*/ ctx[13], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$options*/ 8 && raw0_value !== (raw0_value = /*$options*/ ctx[3].labels.previous + "")) button0.innerHTML = raw0_value;
			if (dirty & /*$pageNumber*/ 16) {
				toggle_class(button0, "disabled", /*$pageNumber*/ ctx[4] === 1);
			}

			if (dirty & /*$pageNumber*/ 16) {
				toggle_class(button1, "active", /*$pageNumber*/ ctx[4] === 1);
			}

			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[4] >= 5) {
				if (if_block0) ; else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(section, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$pageNumber, buttons, setPage, pageCount*/ 180) {
				each_value = /*buttons*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(section, t4);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*pageCount*/ ctx[2].length > 6 && /*$pageNumber*/ ctx[4] <= /*pageCount*/ ctx[2].length - 3) {
				if (if_block1) ; else {
					if_block1 = create_if_block_2$3(ctx);
					if_block1.c();
					if_block1.m(section, t5);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*pageCount*/ ctx[2].length > 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$4(ctx);
					if_block2.c();
					if_block2.m(section, t6);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*$options*/ 8 && raw1_value !== (raw1_value = /*$options*/ ctx[3].labels.next + "")) button2.innerHTML = raw1_value;
			if (dirty & /*$pageNumber, pageCount*/ 20) {
				toggle_class(button2, "disabled", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			}

			if (dirty & /*classList*/ 2 && section_class_value !== (section_class_value = "dt-pagination-buttons " + /*classList*/ ctx[1] + " svelte-9qvh1i")) {
				attr_dev(section, "class", section_class_value);
			}

			if (dirty & /*ref*/ 1) {
				attr_dev(section, "ref", /*ref*/ ctx[0]);
			}

			if (dirty & /*classList, $options*/ 10) {
				toggle_class(section, "css", /*$options*/ ctx[3].css);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			destroy_each(each_blocks, detaching);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(25:0) {#if $datatableWidth > 600}",
		ctx
	});

	return block;
}

// (37:8) {#if pageCount.length > 6 && $pageNumber >= 5}
function create_if_block_4(ctx) {
	let button;
	let t;

	const block = {
		c: function create() {
			button = element("button");
			t = text("...");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "...");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "ellipse svelte-9qvh1i");
			add_location(button, file$7, 37, 12, 1303);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(37:8) {#if pageCount.length > 6 && $pageNumber >= 5}",
		ctx
	});

	return block;
}

// (42:12) {#if n > 0 && n < pageCount.length - 1}
function create_if_block_3(ctx) {
	let button;
	let t_value = /*n*/ ctx[19] + 1 + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[11](/*n*/ ctx[19]);
	}

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-9qvh1i");
			toggle_class(button, "active", /*$pageNumber*/ ctx[4] === /*n*/ ctx[19] + 1);
			add_location(button, file$7, 42, 12, 1453);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_2, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*buttons*/ 32 && t_value !== (t_value = /*n*/ ctx[19] + 1 + "")) set_data_dev(t, t_value);

			if (dirty & /*$pageNumber, buttons*/ 48) {
				toggle_class(button, "active", /*$pageNumber*/ ctx[4] === /*n*/ ctx[19] + 1);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(42:12) {#if n > 0 && n < pageCount.length - 1}",
		ctx
	});

	return block;
}

// (41:8) {#each buttons as n}
function create_each_block$2(ctx) {
	let if_block_anchor;
	let if_block = /*n*/ ctx[19] > 0 && /*n*/ ctx[19] < /*pageCount*/ ctx[2].length - 1 && create_if_block_3(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*n*/ ctx[19] > 0 && /*n*/ ctx[19] < /*pageCount*/ ctx[2].length - 1) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(41:8) {#each buttons as n}",
		ctx
	});

	return block;
}

// (52:8) {#if pageCount.length > 6 && $pageNumber <= pageCount.length - 3}
function create_if_block_2$3(ctx) {
	let button;
	let t;

	const block = {
		c: function create() {
			button = element("button");
			t = text("...");
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, "...");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "ellipse svelte-9qvh1i");
			add_location(button, file$7, 52, 12, 1754);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$3.name,
		type: "if",
		source: "(52:8) {#if pageCount.length > 6 && $pageNumber <= pageCount.length - 3}",
		ctx
	});

	return block;
}

// (56:8) {#if pageCount.length > 1}
function create_if_block_1$4(ctx) {
	let button;
	let t_value = /*pageCount*/ ctx[2].length + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "svelte-9qvh1i");
			toggle_class(button, "active", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			add_location(button, file$7, 56, 12, 1857);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_3*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*pageCount*/ 4 && t_value !== (t_value = /*pageCount*/ ctx[2].length + "")) set_data_dev(t, t_value);

			if (dirty & /*$pageNumber, pageCount*/ 20) {
				toggle_class(button, "active", /*$pageNumber*/ ctx[4] === /*pageCount*/ ctx[2].length);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$4.name,
		type: "if",
		source: "(56:8) {#if pageCount.length > 1}",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*$datatableWidth*/ ctx[6] > 600) return create_if_block$5;
		return create_else_block$3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$7($$self, $$props, $$invalidate) {
	let pageCount;
	let buttons;
	let $rowCount;
	let $options;
	let $pageNumber;
	let $datatableWidth;
	validate_store(rowCount, "rowCount");
	component_subscribe($$self, rowCount, $$value => $$invalidate(8, $rowCount = $$value));
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(3, $options = $$value));
	validate_store(pageNumber, "pageNumber");
	component_subscribe($$self, pageNumber, $$value => $$invalidate(4, $pageNumber = $$value));
	validate_store(datatableWidth, "datatableWidth");
	component_subscribe($$self, datatableWidth, $$value => $$invalidate(6, $datatableWidth = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("PaginationButtons", slots, []);
	let { ref = "" } = $$props;
	let { classList = "" } = $$props;

	const slice = (arr, page) => {
		if (page < 5) {
			return arr.slice(0, 5);
		} else if (page > arr.length - 4) {
			return arr.slice(arr.length - 5, arr.length);
		}

		return arr.slice(page - 2, page + 1);
	};

	const setPage = number => {
		pageNumber.set(number);
		columns.redraw();
	};

	const writable_props = ["ref", "classList"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PaginationButtons> was created with unknown prop '${key}'`);
	});

	const click_handler = () => setPage($pageNumber - 1);
	const click_handler_1 = () => setPage(1);
	const click_handler_2 = n => setPage(n + 1);
	const click_handler_3 = () => setPage(pageCount.length);
	const click_handler_4 = () => setPage($pageNumber + 1);
	const click_handler_5 = () => setPage(1);
	const click_handler_6 = () => setPage($pageNumber - 1);
	const click_handler_7 = () => setPage($pageNumber + 1);
	const click_handler_8 = () => setPage(pageCount.length);

	$$self.$$set = $$props => {
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("classList" in $$props) $$invalidate(1, classList = $$props.classList);
	};

	$$self.$capture_state = () => ({
		options,
		rowCount,
		pageNumber,
		datatableWidth,
		columns,
		ref,
		classList,
		slice,
		setPage,
		pageCount,
		$rowCount,
		$options,
		buttons,
		$pageNumber,
		$datatableWidth
	});

	$$self.$inject_state = $$props => {
		if ("ref" in $$props) $$invalidate(0, ref = $$props.ref);
		if ("classList" in $$props) $$invalidate(1, classList = $$props.classList);
		if ("pageCount" in $$props) $$invalidate(2, pageCount = $$props.pageCount);
		if ("buttons" in $$props) $$invalidate(5, buttons = $$props.buttons);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$rowCount, $options*/ 264) {
			$$invalidate(2, pageCount = Array.from(Array(Math.ceil($rowCount / $options.rowPerPage)).keys()));
		}

		if ($$self.$$.dirty & /*pageCount, $pageNumber*/ 20) {
			$$invalidate(5, buttons = slice(pageCount, $pageNumber));
		}
	};

	return [
		ref,
		classList,
		pageCount,
		$options,
		$pageNumber,
		buttons,
		$datatableWidth,
		setPage,
		$rowCount,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		click_handler_7,
		click_handler_8
	];
}

class PaginationButtons extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { ref: 0, classList: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PaginationButtons",
			options,
			id: create_fragment$7.name
		});
	}

	get ref() {
		throw new Error("<PaginationButtons>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<PaginationButtons>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classList() {
		throw new Error("<PaginationButtons>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classList(value) {
		throw new Error("<PaginationButtons>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\svelte-simple-datatables\src\components\Pagination.svelte generated by Svelte v3.36.0 */
const file$6 = "node_modules\\svelte-simple-datatables\\src\\components\\Pagination.svelte";

// (7:0) {#if $options.pagination && ($options.blocks.paginationRowCount || $options.blocks.paginationButtons)}
function create_if_block$4(ctx) {
	let section;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_2$2, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$options*/ ctx[0].blocks.paginationRowCount) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*$options*/ ctx[0].blocks.paginationButtons && create_if_block_1$3(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if_block0.l(section_nodes);
			t = claim_space(section_nodes);
			if (if_block1) if_block1.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(section, "class", "dt-pagination svelte-195bjyp");
			toggle_class(section, "css", /*$options*/ ctx[0].css);
			add_location(section, file$6, 7, 4, 315);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if_blocks[current_block_type_index].m(section, null);
			append_dev(section, t);
			if (if_block1) if_block1.m(section, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(section, t);
			}

			if (/*$options*/ ctx[0].blocks.paginationButtons) {
				if (if_block1) {
					if (dirty & /*$options*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(section, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*$options*/ 1) {
				toggle_class(section, "css", /*$options*/ ctx[0].css);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(7:0) {#if $options.pagination && ($options.blocks.paginationRowCount || $options.blocks.paginationButtons)}",
		ctx
	});

	return block;
}

// (11:8) {:else}
function create_else_block$2(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(div, file$6, 11, 12, 488);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(11:8) {:else}",
		ctx
	});

	return block;
}

// (9:8) {#if $options.blocks.paginationRowCount}
function create_if_block_2$2(ctx) {
	let paginationrowcount;
	let current;
	paginationrowcount = new PaginationRowCount({ $$inline: true });

	const block = {
		c: function create() {
			create_component(paginationrowcount.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationrowcount.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationrowcount, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationrowcount.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationrowcount.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationrowcount, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$2.name,
		type: "if",
		source: "(9:8) {#if $options.blocks.paginationRowCount}",
		ctx
	});

	return block;
}

// (14:8) {#if $options.blocks.paginationButtons}
function create_if_block_1$3(ctx) {
	let paginationbuttons;
	let current;
	paginationbuttons = new PaginationButtons({ $$inline: true });

	const block = {
		c: function create() {
			create_component(paginationbuttons.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationbuttons.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationbuttons, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationbuttons.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationbuttons.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationbuttons, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(14:8) {#if $options.blocks.paginationButtons}",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$options*/ ctx[0].pagination && (/*$options*/ ctx[0].blocks.paginationRowCount || /*$options*/ ctx[0].blocks.paginationButtons) && create_if_block$4(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*$options*/ ctx[0].pagination && (/*$options*/ ctx[0].blocks.paginationRowCount || /*$options*/ ctx[0].blocks.paginationButtons)) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$options*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let $options;
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(0, $options = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Pagination", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Pagination> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		PaginationRowCount,
		PaginationButtons,
		options,
		$options
	});

	return [$options];
}

class Pagination extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Pagination",
			options,
			id: create_fragment$6.name
		});
	}
}

const header = {
    removeOriginalThead: () => {
        setTimeout(() => {
            const thead = document.querySelector('.datatable table thead');
            const originHeight = thead.getBoundingClientRect().height;
            // const tableContainer = document.querySelector('section.datatable .dt-table')
            // const scrollXHeight = tableContainer.offsetHeight - tableContainer.clientHeight
            // - (scrollXHeight > 5 ? scrollXHeight + 10 : 1)
            thead.parentNode.style.marginTop = '-' + (originHeight) + 'px';
            thead.style.visibility = 'hidden';
        }, 50);
    },
    getOrginalTHeadClassList: () => {
        return document.querySelector('.datatable table thead').classList
    },
};

/* node_modules\svelte-simple-datatables\src\components\StickyHeader.svelte generated by Svelte v3.36.0 */
const file$5 = "node_modules\\svelte-simple-datatables\\src\\components\\StickyHeader.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (17:12) {#each $columns as th}
function create_each_block_1(ctx) {
	let th;
	let html_tag;
	let raw_value = /*th*/ ctx[5].html + "";
	let span;
	let t;
	let th_class_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[3](/*th*/ ctx[5], ...args);
	}

	const block = {
		c: function create() {
			th = element("th");
			span = element("span");
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			th = claim_element(nodes, "TH", { nowrap: true, style: true, class: true });
			var th_nodes = children(th);
			span = claim_element(th_nodes, "SPAN", { class: true });
			children(span).forEach(detach_dev);
			t = claim_space(th_nodes);
			th_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(span);
			attr_dev(span, "class", "svelte-1sonwgi");
			add_location(span, file$5, 24, 35, 911);
			attr_dev(th, "nowrap", "");
			set_style(th, "min-width", /*th*/ ctx[5].minWidth + "px");
			attr_dev(th, "class", th_class_value = "" + (null_to_empty(/*th*/ ctx[5].classList) + " svelte-1sonwgi"));
			toggle_class(th, "sortable", /*th*/ ctx[5].key && /*$options*/ ctx[1].sortable === true);
			add_location(th, file$5, 17, 16, 582);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			html_tag.m(raw_value, th);
			append_dev(th, span);
			append_dev(th, t);

			if (!mounted) {
				dispose = listen_dev(th, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*$columns*/ 4 && raw_value !== (raw_value = /*th*/ ctx[5].html + "")) html_tag.p(raw_value);

			if (dirty & /*$columns*/ 4) {
				set_style(th, "min-width", /*th*/ ctx[5].minWidth + "px");
			}

			if (dirty & /*$columns*/ 4 && th_class_value !== (th_class_value = "" + (null_to_empty(/*th*/ ctx[5].classList) + " svelte-1sonwgi"))) {
				attr_dev(th, "class", th_class_value);
			}

			if (dirty & /*$columns, $columns, $options*/ 6) {
				toggle_class(th, "sortable", /*th*/ ctx[5].key && /*$options*/ ctx[1].sortable === true);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(17:12) {#each $columns as th}",
		ctx
	});

	return block;
}

// (29:8) {#if $options.columnFilter === true}
function create_if_block$3(ctx) {
	let tr;
	let each_value = /*$columns*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr_nodes);
			}

			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(tr, file$5, 29, 12, 1038);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$columns, $options, columns*/ 6) {
				each_value = /*$columns*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(29:8) {#if $options.columnFilter === true}",
		ctx
	});

	return block;
}

// (33:24) {#if th.key}
function create_if_block_1$2(ctx) {
	let input;
	let input_placeholder_value;
	let mounted;
	let dispose;

	function input_handler(...args) {
		return /*input_handler*/ ctx[4](/*th*/ ctx[5], ...args);
	}

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				placeholder: true,
				class: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "text");
			attr_dev(input, "placeholder", input_placeholder_value = /*$options*/ ctx[1].labels.filter);
			attr_dev(input, "class", "browser-default svelte-1sonwgi");
			add_location(input, file$5, 33, 28, 1229);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = listen_dev(input, "input", input_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$options*/ 2 && input_placeholder_value !== (input_placeholder_value = /*$options*/ ctx[1].labels.filter)) {
				attr_dev(input, "placeholder", input_placeholder_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(33:24) {#if th.key}",
		ctx
	});

	return block;
}

// (31:16) {#each $columns as th}
function create_each_block$1(ctx) {
	let th;
	let t;
	let if_block = /*th*/ ctx[5].key && create_if_block_1$2(ctx);

	const block = {
		c: function create() {
			th = element("th");
			if (if_block) if_block.c();
			t = space();
			this.h();
		},
		l: function claim(nodes) {
			th = claim_element(nodes, "TH", { class: true, style: true });
			var th_nodes = children(th);
			if (if_block) if_block.l(th_nodes);
			t = claim_space(th_nodes);
			th_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(th, "class", "filter svelte-1sonwgi");
			set_style(th, "width", /*th*/ ctx[5].width);
			set_style(th, "height", "25px");
			add_location(th, file$5, 31, 20, 1104);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			if (if_block) if_block.m(th, null);
			append_dev(th, t);
		},
		p: function update(ctx, dirty) {
			if (/*th*/ ctx[5].key) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$2(ctx);
					if_block.c();
					if_block.m(th, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*$columns*/ 4) {
				set_style(th, "width", /*th*/ ctx[5].width);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(31:16) {#each $columns as th}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let section;
	let thead;
	let tr;
	let t;
	let thead_class_value;
	let each_value_1 = /*$columns*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block = /*$options*/ ctx[1].columnFilter === true && create_if_block$3(ctx);

	const block = {
		c: function create() {
			section = element("section");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			thead = claim_element(section_nodes, "THEAD", { class: true });
			var thead_nodes = children(thead);
			tr = claim_element(thead_nodes, "TR", {});
			var tr_nodes = children(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr_nodes);
			}

			tr_nodes.forEach(detach_dev);
			t = claim_space(thead_nodes);
			if (if_block) if_block.l(thead_nodes);
			thead_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(tr, file$5, 15, 8, 524);
			attr_dev(thead, "class", thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[0]) + " svelte-1sonwgi"));
			add_location(thead, file$5, 14, 4, 484);
			attr_dev(section, "class", "dt-header svelte-1sonwgi");
			toggle_class(section, "sortable", /*$options*/ ctx[1].sortable === true);
			toggle_class(section, "css", /*$options*/ ctx[1].css);
			add_location(section, file$5, 13, 0, 382);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, thead);
			append_dev(thead, tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append_dev(thead, t);
			if (if_block) if_block.m(thead, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$columns, $options, columns*/ 6) {
				each_value_1 = /*$columns*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (/*$options*/ ctx[1].columnFilter === true) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(thead, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*theadClassList*/ 1 && thead_class_value !== (thead_class_value = "" + (null_to_empty(/*theadClassList*/ ctx[0]) + " svelte-1sonwgi"))) {
				attr_dev(thead, "class", thead_class_value);
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(section, "sortable", /*$options*/ ctx[1].sortable === true);
			}

			if (dirty & /*$options*/ 2) {
				toggle_class(section, "css", /*$options*/ ctx[1].css);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_each(each_blocks, detaching);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let $options;
	let $columns;
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	validate_store(columns, "columns");
	component_subscribe($$self, columns, $$value => $$invalidate(2, $columns = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("StickyHeader", slots, []);
	let theadClassList;

	onMount(() => {
		columns.draw();
		header.removeOriginalThead();
		$$invalidate(0, theadClassList = header.getOrginalTHeadClassList());
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<StickyHeader> was created with unknown prop '${key}'`);
	});

	const click_handler = (th, e) => columns.sort(e.target, th.key);
	const input_handler = (th, e) => columns.filter(th.key, e.target.value);

	$$self.$capture_state = () => ({
		options,
		columns,
		header,
		onMount,
		theadClassList,
		$options,
		$columns
	});

	$$self.$inject_state = $$props => {
		if ("theadClassList" in $$props) $$invalidate(0, theadClassList = $$props.theadClassList);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [theadClassList, $options, $columns, click_handler, input_handler];
}

class StickyHeader extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StickyHeader",
			options,
			id: create_fragment$5.name
		});
	}
}

/* node_modules\svelte-simple-datatables\src\Datatable.svelte generated by Svelte v3.36.0 */
const file$4 = "node_modules\\svelte-simple-datatables\\src\\Datatable.svelte";

// (20:1) {#if $options.blocks.searchInput === true}
function create_if_block_2$1(ctx) {
	let search;
	let current;
	search = new Search({ $$inline: true });

	const block = {
		c: function create() {
			create_component(search.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(search.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(search, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(search, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(20:1) {#if $options.blocks.searchInput === true}",
		ctx
	});

	return block;
}

// (24:2) {#if $options.scrollY}
function create_if_block_1$1(ctx) {
	let stickyheader;
	let current;
	stickyheader = new StickyHeader({ $$inline: true });

	const block = {
		c: function create() {
			create_component(stickyheader.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(stickyheader.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(stickyheader, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(stickyheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(stickyheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(stickyheader, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(24:2) {#if $options.scrollY}",
		ctx
	});

	return block;
}

// (31:1) {#if $options.blocks.paginationRowCount === true || $options.blocks.paginationButtons === true}
function create_if_block$2(ctx) {
	let pagination;
	let current;
	pagination = new Pagination({ $$inline: true });

	const block = {
		c: function create() {
			create_component(pagination.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(pagination.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(pagination, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(pagination.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(pagination.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(pagination, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(31:1) {#if $options.blocks.paginationRowCount === true || $options.blocks.paginationButtons === true}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let section;
	let t0;
	let article;
	let t1;
	let table;
	let t2;
	let section_class_value;
	let current;
	let if_block0 = /*$options*/ ctx[1].blocks.searchInput === true && create_if_block_2$1(ctx);
	let if_block1 = /*$options*/ ctx[1].scrollY && create_if_block_1$1(ctx);
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let if_block2 = (/*$options*/ ctx[1].blocks.paginationRowCount === true || /*$options*/ ctx[1].blocks.paginationButtons === true) && create_if_block$2(ctx);

	const block = {
		c: function create() {
			section = element("section");
			if (if_block0) if_block0.c();
			t0 = space();
			article = element("article");
			if (if_block1) if_block1.c();
			t1 = space();
			table = element("table");
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			if (if_block0) if_block0.l(section_nodes);
			t0 = claim_space(section_nodes);
			article = claim_element(section_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			if (if_block1) if_block1.l(article_nodes);
			t1 = claim_space(article_nodes);
			table = claim_element(article_nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			if (default_slot) default_slot.l(table_nodes);
			table_nodes.forEach(detach_dev);
			article_nodes.forEach(detach_dev);
			t2 = claim_space(section_nodes);
			if (if_block2) if_block2.l(section_nodes);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(table, "class", "svelte-udk322");
			add_location(table, file$4, 26, 2, 801);
			attr_dev(article, "class", "dt-table svelte-udk322");
			add_location(article, file$4, 22, 1, 716);
			attr_dev(section, "class", section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-udk322");
			toggle_class(section, "scroll-y", /*$options*/ ctx[1].scrollY);
			toggle_class(section, "css", /*$options*/ ctx[1].css);
			add_location(section, file$4, 18, 0, 548);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			if (if_block0) if_block0.m(section, null);
			append_dev(section, t0);
			append_dev(section, article);
			if (if_block1) if_block1.m(article, null);
			append_dev(article, t1);
			append_dev(article, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			append_dev(section, t2);
			if (if_block2) if_block2.m(section, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*$options*/ ctx[1].blocks.searchInput === true) {
				if (if_block0) {
					if (dirty & /*$options*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(section, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$options*/ ctx[1].scrollY) {
				if (if_block1) {
					if (dirty & /*$options*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(article, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (/*$options*/ ctx[1].blocks.paginationRowCount === true || /*$options*/ ctx[1].blocks.paginationButtons === true) {
				if (if_block2) {
					if (dirty & /*$options*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(section, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*classList*/ 1 && section_class_value !== (section_class_value = "datatable " + /*classList*/ ctx[0] + " svelte-udk322")) {
				attr_dev(section, "class", section_class_value);
			}

			if (dirty & /*classList, $options*/ 3) {
				toggle_class(section, "scroll-y", /*$options*/ ctx[1].scrollY);
			}

			if (dirty & /*classList, $options*/ 3) {
				toggle_class(section, "css", /*$options*/ ctx[1].css);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let $options;
	validate_store(options, "options");
	component_subscribe($$self, options, $$value => $$invalidate(1, $options = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Datatable", slots, ['default']);
	let { data = [] } = $$props;
	let { settings = {} } = $$props;
	let { classList = "" } = $$props;
	onMount(() => datatable.init());
	onDestroy(() => datatable.reset());
	const writable_props = ["data", "settings", "classList"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Datatable> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("settings" in $$props) $$invalidate(3, settings = $$props.settings);
		if ("classList" in $$props) $$invalidate(0, classList = $$props.classList);
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		options,
		datatable,
		Search,
		Pagination,
		StickyHeader,
		onMount,
		onDestroy,
		data,
		settings,
		classList,
		$options
	});

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(2, data = $$props.data);
		if ("settings" in $$props) $$invalidate(3, settings = $$props.settings);
		if ("classList" in $$props) $$invalidate(0, classList = $$props.classList);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*data, settings*/ 12) {
			{
				datatable.setRows(data);
				options.update(settings);
			}
		}
	};

	return [classList, $options, data, settings, $$scope, slots];
}

class Datatable extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { data: 2, settings: 3, classList: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Datatable",
			options,
			id: create_fragment$4.name
		});
	}

	get data() {
		throw new Error("<Datatable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Datatable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get settings() {
		throw new Error("<Datatable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set settings(value) {
		throw new Error("<Datatable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get classList() {
		throw new Error("<Datatable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set classList(value) {
		throw new Error("<Datatable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\tables\item.svelte generated by Svelte v3.36.0 */
const file$3 = "src\\components\\tables\\item.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (60:4) {#each $rows as row}
function create_each_block(ctx) {
	let tr;
	let td0;
	let t0_value = /*row*/ ctx[10].name + "";
	let t0;
	let t1;
	let td1;
	let t2_value = /*row*/ ctx[10].description + "";
	let t2;
	let t3;
	let td2;
	let t4_value = /*row*/ ctx[10].price + "";
	let t4;
	let t5;
	let td3;
	let t6_value = /*row*/ ctx[10].stock + "";
	let t6;
	let t7;
	let td4;
	let t8_value = /*formatDate*/ ctx[6](/*row*/ ctx[10].created_at) + "";
	let t8;
	let t9;
	let td5;
	let t10_value = /*formatDate*/ ctx[6](/*row*/ ctx[10].updated_at) + "";
	let t10;
	let t11;
	let td6;
	let div;
	let a0;
	let editicon;
	let t12;
	let a1;
	let trash2icon;
	let t13;
	let current;
	let mounted;
	let dispose;

	editicon = new EditIcon({
			props: { class: "align-middle text-success" },
			$$inline: true
		});

	function click_handler() {
		return /*click_handler*/ ctx[7](/*row*/ ctx[10]);
	}

	trash2icon = new Trash2Icon({
			props: { class: "align-middle text-danger" },
			$$inline: true
		});

	function click_handler_1() {
		return /*click_handler_1*/ ctx[8](/*row*/ ctx[10]);
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			t0 = text(t0_value);
			t1 = space();
			td1 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td2 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td3 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td4 = element("td");
			t8 = text(t8_value);
			t9 = space();
			td5 = element("td");
			t10 = text(t10_value);
			t11 = space();
			td6 = element("td");
			div = element("div");
			a0 = element("a");
			create_component(editicon.$$.fragment);
			t12 = space();
			a1 = element("a");
			create_component(trash2icon.$$.fragment);
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", {});
			var td0_nodes = children(td0);
			t0 = claim_text(td0_nodes, t0_value);
			td0_nodes.forEach(detach_dev);
			t1 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", {});
			var td1_nodes = children(td1);
			t2 = claim_text(td1_nodes, t2_value);
			td1_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", {});
			var td2_nodes = children(td2);
			t4 = claim_text(td2_nodes, t4_value);
			td2_nodes.forEach(detach_dev);
			t5 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", {});
			var td3_nodes = children(td3);
			t6 = claim_text(td3_nodes, t6_value);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", {});
			var td4_nodes = children(td4);
			t8 = claim_text(td4_nodes, t8_value);
			td4_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", {});
			var td5_nodes = children(td5);
			t10 = claim_text(td5_nodes, t10_value);
			td5_nodes.forEach(detach_dev);
			t11 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", {});
			var td6_nodes = children(td6);
			div = claim_element(td6_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			a0 = claim_element(div_nodes, "A", { class: true });
			var a0_nodes = children(a0);
			claim_component(editicon.$$.fragment, a0_nodes);
			a0_nodes.forEach(detach_dev);
			t12 = claim_space(div_nodes);

			a1 = claim_element(div_nodes, "A", {
				"data-bs-toggle": true,
				"data-bs-target": true
			});

			var a1_nodes = children(a1);
			claim_component(trash2icon.$$.fragment, a1_nodes);
			a1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			td6_nodes.forEach(detach_dev);
			t13 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(td0, file$3, 61, 6, 1422);
			add_location(td1, file$3, 62, 6, 1449);
			add_location(td2, file$3, 63, 6, 1483);
			add_location(td3, file$3, 64, 6, 1511);
			add_location(td4, file$3, 65, 6, 1539);
			add_location(td5, file$3, 66, 6, 1584);
			attr_dev(a0, "class", "me-3");
			add_location(a0, file$3, 69, 12, 1702);
			attr_dev(a1, "data-bs-toggle", "modal");
			attr_dev(a1, "data-bs-target", "#deleteModal");
			add_location(a1, file$3, 70, 12, 1822);
			attr_dev(div, "class", "d-flex justify-content-center");
			add_location(div, file$3, 68, 10, 1645);
			add_location(td6, file$3, 67, 6, 1629);
			add_location(tr, file$3, 60, 4, 1410);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, t0);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, t2);
			append_dev(tr, t3);
			append_dev(tr, td2);
			append_dev(td2, t4);
			append_dev(tr, t5);
			append_dev(tr, td3);
			append_dev(td3, t6);
			append_dev(tr, t7);
			append_dev(tr, td4);
			append_dev(td4, t8);
			append_dev(tr, t9);
			append_dev(tr, td5);
			append_dev(td5, t10);
			append_dev(tr, t11);
			append_dev(tr, td6);
			append_dev(td6, div);
			append_dev(div, a0);
			mount_component(editicon, a0, null);
			append_dev(div, t12);
			append_dev(div, a1);
			mount_component(trash2icon, a1, null);
			append_dev(tr, t13);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", click_handler, false, false, false),
					listen_dev(a1, "click", click_handler_1, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*$rows*/ 4) && t0_value !== (t0_value = /*row*/ ctx[10].name + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*$rows*/ 4) && t2_value !== (t2_value = /*row*/ ctx[10].description + "")) set_data_dev(t2, t2_value);
			if ((!current || dirty & /*$rows*/ 4) && t4_value !== (t4_value = /*row*/ ctx[10].price + "")) set_data_dev(t4, t4_value);
			if ((!current || dirty & /*$rows*/ 4) && t6_value !== (t6_value = /*row*/ ctx[10].stock + "")) set_data_dev(t6, t6_value);
			if ((!current || dirty & /*$rows*/ 4) && t8_value !== (t8_value = /*formatDate*/ ctx[6](/*row*/ ctx[10].created_at) + "")) set_data_dev(t8, t8_value);
			if ((!current || dirty & /*$rows*/ 4) && t10_value !== (t10_value = /*formatDate*/ ctx[6](/*row*/ ctx[10].updated_at) + "")) set_data_dev(t10, t10_value);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editicon.$$.fragment, local);
			transition_in(trash2icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editicon.$$.fragment, local);
			transition_out(trash2icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_component(editicon);
			destroy_component(trash2icon);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(60:4) {#each $rows as row}",
		ctx
	});

	return block;
}

// (49:0) <Datatable {settings} data={items}>
function create_default_slot(ctx) {
	let thead;
	let th0;
	let t0;
	let t1;
	let th1;
	let t2;
	let t3;
	let th2;
	let t4;
	let t5;
	let th3;
	let t6;
	let t7;
	let th4;
	let t8;
	let t9;
	let th5;
	let t10;
	let t11;
	let th6;
	let t12;
	let t13;
	let tbody;
	let current;
	let each_value = /*$rows*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			thead = element("thead");
			th0 = element("th");
			t0 = text("Name");
			t1 = space();
			th1 = element("th");
			t2 = text("Description");
			t3 = space();
			th2 = element("th");
			t4 = text("Price");
			t5 = space();
			th3 = element("th");
			t6 = text("Stock");
			t7 = space();
			th4 = element("th");
			t8 = text("Created at");
			t9 = space();
			th5 = element("th");
			t10 = text("Updated at");
			t11 = space();
			th6 = element("th");
			t12 = text("Action");
			t13 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			thead = claim_element(nodes, "THEAD", {});
			var thead_nodes = children(thead);
			th0 = claim_element(thead_nodes, "TH", { "data-key": true });
			var th0_nodes = children(th0);
			t0 = claim_text(th0_nodes, "Name");
			th0_nodes.forEach(detach_dev);
			t1 = claim_space(thead_nodes);
			th1 = claim_element(thead_nodes, "TH", { "data-key": true });
			var th1_nodes = children(th1);
			t2 = claim_text(th1_nodes, "Description");
			th1_nodes.forEach(detach_dev);
			t3 = claim_space(thead_nodes);
			th2 = claim_element(thead_nodes, "TH", { "data-key": true });
			var th2_nodes = children(th2);
			t4 = claim_text(th2_nodes, "Price");
			th2_nodes.forEach(detach_dev);
			t5 = claim_space(thead_nodes);
			th3 = claim_element(thead_nodes, "TH", { "data-key": true });
			var th3_nodes = children(th3);
			t6 = claim_text(th3_nodes, "Stock");
			th3_nodes.forEach(detach_dev);
			t7 = claim_space(thead_nodes);
			th4 = claim_element(thead_nodes, "TH", { "data-key": true });
			var th4_nodes = children(th4);
			t8 = claim_text(th4_nodes, "Created at");
			th4_nodes.forEach(detach_dev);
			t9 = claim_space(thead_nodes);
			th5 = claim_element(thead_nodes, "TH", { "data-key": true });
			var th5_nodes = children(th5);
			t10 = claim_text(th5_nodes, "Updated at");
			th5_nodes.forEach(detach_dev);
			t11 = claim_space(thead_nodes);
			th6 = claim_element(thead_nodes, "TH", {});
			var th6_nodes = children(th6);
			t12 = claim_text(th6_nodes, "Action");
			th6_nodes.forEach(detach_dev);
			thead_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			tbody = claim_element(nodes, "TBODY", {});
			var tbody_nodes = children(tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			tbody_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(th0, "data-key", "name");
			add_location(th0, file$3, 50, 4, 1088);
			attr_dev(th1, "data-key", "description");
			add_location(th1, file$3, 51, 4, 1123);
			attr_dev(th2, "data-key", "price");
			add_location(th2, file$3, 52, 4, 1172);
			attr_dev(th3, "data-key", "stock");
			add_location(th3, file$3, 53, 4, 1209);
			attr_dev(th4, "data-key", "created_at");
			add_location(th4, file$3, 54, 4, 1246);
			attr_dev(th5, "data-key", "updated_at");
			add_location(th5, file$3, 55, 4, 1293);
			add_location(th6, file$3, 56, 4, 1340);
			add_location(thead, file$3, 49, 2, 1075);
			add_location(tbody, file$3, 58, 2, 1371);
		},
		m: function mount(target, anchor) {
			insert_dev(target, thead, anchor);
			append_dev(thead, th0);
			append_dev(th0, t0);
			append_dev(thead, t1);
			append_dev(thead, th1);
			append_dev(th1, t2);
			append_dev(thead, t3);
			append_dev(thead, th2);
			append_dev(th2, t4);
			append_dev(thead, t5);
			append_dev(thead, th3);
			append_dev(th3, t6);
			append_dev(thead, t7);
			append_dev(thead, th4);
			append_dev(th4, t8);
			append_dev(thead, t9);
			append_dev(thead, th5);
			append_dev(th5, t10);
			append_dev(thead, t11);
			append_dev(thead, th6);
			append_dev(th6, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, tbody, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*id, $rows, handleUpdate, formatDate*/ 86) {
				each_value = /*$rows*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(thead);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(tbody);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(49:0) <Datatable {settings} data={items}>",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let datatable;
	let t0;
	let div5;
	let div4;
	let div3;
	let div0;
	let h5;
	let t1;
	let t2;
	let button0;
	let t3;
	let div1;
	let t4;
	let t5;
	let div2;
	let button1;
	let t6;
	let t7;
	let button2;
	let t8;
	let current;
	let mounted;
	let dispose;

	datatable = new Datatable({
			props: {
				settings: /*settings*/ ctx[3],
				data: /*items*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(datatable.$$.fragment);
			t0 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			h5 = element("h5");
			t1 = text("Modal title");
			t2 = space();
			button0 = element("button");
			t3 = space();
			div1 = element("div");
			t4 = text("are u sure delete this item?");
			t5 = space();
			div2 = element("div");
			button1 = element("button");
			t6 = text("no");
			t7 = space();
			button2 = element("button");
			t8 = text("yes");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(datatable.$$.fragment, nodes);
			t0 = claim_space(nodes);

			div5 = claim_element(nodes, "DIV", {
				class: true,
				id: true,
				tabindex: true,
				"aria-labelledby": true,
				"aria-hidden": true
			});

			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h5 = claim_element(div0_nodes, "H5", { class: true, id: true });
			var h5_nodes = children(h5);
			t1 = claim_text(h5_nodes, "Modal title");
			h5_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);

			button0 = claim_element(div0_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-bs-dismiss": true,
				"aria-label": true
			});

			children(button0).forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t4 = claim_text(div1_nodes, "are u sure delete this item?");
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			button1 = claim_element(div2_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-bs-dismiss": true
			});

			var button1_nodes = children(button1);
			t6 = claim_text(button1_nodes, "no");
			button1_nodes.forEach(detach_dev);
			t7 = claim_space(div2_nodes);

			button2 = claim_element(div2_nodes, "BUTTON", {
				type: true,
				class: true,
				"data-bs-dismiss": true
			});

			var button2_nodes = children(button2);
			t8 = claim_text(button2_nodes, "yes");
			button2_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "modal-title");
			attr_dev(h5, "id", "exampleModalLabel");
			add_location(h5, file$3, 82, 8, 2295);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn-close");
			attr_dev(button0, "data-bs-dismiss", "modal");
			attr_dev(button0, "aria-label", "Close");
			add_location(button0, file$3, 83, 8, 2368);
			attr_dev(div0, "class", "modal-header");
			add_location(div0, file$3, 81, 6, 2259);
			attr_dev(div1, "class", "modal-body");
			add_location(div1, file$3, 85, 6, 2482);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-secondary");
			attr_dev(button1, "data-bs-dismiss", "modal");
			add_location(button1, file$3, 89, 8, 2602);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "class", "btn btn-danger");
			attr_dev(button2, "data-bs-dismiss", "modal");
			add_location(button2, file$3, 90, 8, 2695);
			attr_dev(div2, "class", "modal-footer");
			add_location(div2, file$3, 88, 6, 2566);
			attr_dev(div3, "class", "modal-content");
			add_location(div3, file$3, 80, 4, 2224);
			attr_dev(div4, "class", "modal-dialog modal-dialog-centered modal-sm");
			add_location(div4, file$3, 79, 2, 2161);
			attr_dev(div5, "class", "modal fade");
			attr_dev(div5, "id", "deleteModal");
			attr_dev(div5, "tabindex", "-1");
			attr_dev(div5, "aria-labelledby", "exampleModalLabel");
			attr_dev(div5, "aria-hidden", "true");
			add_location(div5, file$3, 78, 0, 2047);
		},
		m: function mount(target, anchor) {
			mount_component(datatable, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, div4);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div0, h5);
			append_dev(h5, t1);
			append_dev(div0, t2);
			append_dev(div0, button0);
			append_dev(div3, t3);
			append_dev(div3, div1);
			append_dev(div1, t4);
			append_dev(div3, t5);
			append_dev(div3, div2);
			append_dev(div2, button1);
			append_dev(button1, t6);
			append_dev(div2, t7);
			append_dev(div2, button2);
			append_dev(button2, t8);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button2, "click", /*handleRemove*/ ctx[5], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			const datatable_changes = {};
			if (dirty & /*items*/ 1) datatable_changes.data = /*items*/ ctx[0];

			if (dirty & /*$$scope, $rows, id*/ 8198) {
				datatable_changes.$$scope = { dirty, ctx };
			}

			datatable.$set(datatable_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(datatable.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(datatable.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(datatable, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div5);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let $rows;
	validate_store(rows, "rows");
	component_subscribe($$self, rows, $$value => $$invalidate(2, $rows = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Item", slots, []);
	let dispatch = createEventDispatcher();
	let id;
	let { items = [] } = $$props;

	const settings = {
		sortable: true,
		pagination: true,
		rowPerPage: 10,
		columnFilter: false
	};

	const handleUpdate = async id => {
		let item = items.find(item => item.id == id);
		let data = { item, "status": "update" };
		dispatch("update", data);
	};

	const handleRemove = async () => {
		dispatch("remove", id);

		await fetch(`http://127.0.0.1:8000/api/items/${id}`, {
			method: "delete",
			headers: { "Content-Type": "application/json" }
		});
	};

	const formatDate = v => {
		let date = new Date(v).toLocaleString("id-ID", { dateStyle: "medium" });
		let result = date;
		return result;
	};

	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Item> was created with unknown prop '${key}'`);
	});

	const click_handler = row => {
		handleUpdate(row.id);
	};

	const click_handler_1 = row => {
		$$invalidate(1, id = row.id);
	};

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		Datatable,
		rows,
		EditIcon,
		Trash2Icon,
		createEventDispatcher,
		dispatch,
		id,
		items,
		settings,
		handleUpdate,
		handleRemove,
		formatDate,
		$rows
	});

	$$self.$inject_state = $$props => {
		if ("dispatch" in $$props) dispatch = $$props.dispatch;
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		items,
		id,
		$rows,
		settings,
		handleUpdate,
		handleRemove,
		formatDate,
		click_handler,
		click_handler_1
	];
}

class Item$2 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Item",
			options,
			id: create_fragment$3.name
		});
	}

	get items() {
		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\partials\Field.svelte generated by Svelte v3.36.0 */

const file$2 = "src\\components\\partials\\Field.svelte";

// (19:2) {:else}
function create_else_block$1(ctx) {
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				value: true,
				autocomplete: true,
				required: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", /*type*/ ctx[3]);
			attr_dev(input, "class", "form-control");
			attr_dev(input, "id", /*name*/ ctx[1]);
			input.value = /*value*/ ctx[0];
			attr_dev(input, "autocomplete", "off");
			input.required = true;
			add_location(input, file$2, 19, 4, 512);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = listen_dev(input, "input", /*handleInput*/ ctx[7], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*type*/ 8) {
				attr_dev(input, "type", /*type*/ ctx[3]);
			}

			if (dirty & /*name*/ 2) {
				attr_dev(input, "id", /*name*/ ctx[1]);
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				prop_dev(input, "value", /*value*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(19:2) {:else}",
		ctx
	});

	return block;
}

// (17:2) {#if type === "textarea"}
function create_if_block_2(ctx) {
	let textarea;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			textarea = element("textarea");
			this.h();
		},
		l: function claim(nodes) {
			textarea = claim_element(nodes, "TEXTAREA", {
				class: true,
				id: true,
				rows: true,
				value: true,
				autocomplete: true,
				required: true
			});

			children(textarea).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(textarea, "class", "form-control");
			attr_dev(textarea, "id", /*name*/ ctx[1]);
			attr_dev(textarea, "rows", /*rows*/ ctx[4]);
			textarea.value = /*value*/ ctx[0];
			attr_dev(textarea, "autocomplete", "off");
			textarea.required = true;
			add_location(textarea, file$2, 17, 4, 377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, textarea, anchor);

			if (!mounted) {
				dispose = listen_dev(textarea, "input", /*handleInput*/ ctx[7], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*name*/ 2) {
				attr_dev(textarea, "id", /*name*/ ctx[1]);
			}

			if (dirty & /*rows*/ 16) {
				attr_dev(textarea, "rows", /*rows*/ ctx[4]);
			}

			if (dirty & /*value*/ 1) {
				prop_dev(textarea, "value", /*value*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(textarea);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(17:2) {#if type === \\\"textarea\\\"}",
		ctx
	});

	return block;
}

// (22:2) {#if valid !== 'undefined'}
function create_if_block_1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*valid*/ ctx[5]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*valid*/ ctx[5]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "valid-feedback");
			add_location(div, file$2, 22, 4, 662);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*valid*/ 32) set_data_dev(t, /*valid*/ ctx[5]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(22:2) {#if valid !== 'undefined'}",
		ctx
	});

	return block;
}

// (27:2) {#if invalid !== 'undefined'}
function create_if_block$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*invalid*/ ctx[6]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*invalid*/ ctx[6]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "invalid-feedback");
			add_location(div, file$2, 27, 4, 765);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*invalid*/ 64) set_data_dev(t, /*invalid*/ ctx[6]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(27:2) {#if invalid !== 'undefined'}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let label_1;
	let t0;
	let t1;
	let t2;
	let t3;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[3] === "textarea") return create_if_block_2;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*valid*/ ctx[5] !== "undefined" && create_if_block_1(ctx);
	let if_block2 = /*invalid*/ ctx[6] !== "undefined" && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			label_1 = element("label");
			t0 = text(/*label*/ ctx[2]);
			t1 = space();
			if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			label_1 = claim_element(div_nodes, "LABEL", { for: true, class: true });
			var label_1_nodes = children(label_1);
			t0 = claim_text(label_1_nodes, /*label*/ ctx[2]);
			label_1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			if_block0.l(div_nodes);
			t2 = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			t3 = claim_space(div_nodes);
			if (if_block2) if_block2.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label_1, "for", /*name*/ ctx[1]);
			attr_dev(label_1, "class", "form-label");
			add_location(label_1, file$2, 15, 2, 290);
			attr_dev(div, "class", "mb-3");
			add_location(div, file$2, 14, 0, 268);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, label_1);
			append_dev(label_1, t0);
			append_dev(div, t1);
			if_block0.m(div, null);
			append_dev(div, t2);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t3);
			if (if_block2) if_block2.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*label*/ 4) set_data_dev(t0, /*label*/ ctx[2]);

			if (dirty & /*name*/ 2) {
				attr_dev(label_1, "for", /*name*/ ctx[1]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div, t2);
				}
			}

			if (/*valid*/ ctx[5] !== "undefined") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*invalid*/ ctx[6] !== "undefined") {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block$1(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Field", slots, []);
	let { name } = $$props;
	let { label } = $$props;
	let { type } = $$props;
	let { value } = $$props;
	let { rows = 3 } = $$props;
	let { valid = "undefined" } = $$props;
	let { invalid = "undefined" } = $$props;

	const handleInput = e => {
		$$invalidate(0, value = e.target.value);
	};

	const writable_props = ["name", "label", "type", "value", "rows", "valid", "invalid"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Field> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("label" in $$props) $$invalidate(2, label = $$props.label);
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("rows" in $$props) $$invalidate(4, rows = $$props.rows);
		if ("valid" in $$props) $$invalidate(5, valid = $$props.valid);
		if ("invalid" in $$props) $$invalidate(6, invalid = $$props.invalid);
	};

	$$self.$capture_state = () => ({
		name,
		label,
		type,
		value,
		rows,
		valid,
		invalid,
		handleInput
	});

	$$self.$inject_state = $$props => {
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("label" in $$props) $$invalidate(2, label = $$props.label);
		if ("type" in $$props) $$invalidate(3, type = $$props.type);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("rows" in $$props) $$invalidate(4, rows = $$props.rows);
		if ("valid" in $$props) $$invalidate(5, valid = $$props.valid);
		if ("invalid" in $$props) $$invalidate(6, invalid = $$props.invalid);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, name, label, type, rows, valid, invalid, handleInput];
}

class Field extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			name: 1,
			label: 2,
			type: 3,
			value: 0,
			rows: 4,
			valid: 5,
			invalid: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Field",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<Field> was created without expected prop 'name'");
		}

		if (/*label*/ ctx[2] === undefined && !("label" in props)) {
			console.warn("<Field> was created without expected prop 'label'");
		}

		if (/*type*/ ctx[3] === undefined && !("type" in props)) {
			console.warn("<Field> was created without expected prop 'type'");
		}

		if (/*value*/ ctx[0] === undefined && !("value" in props)) {
			console.warn("<Field> was created without expected prop 'value'");
		}
	}

	get name() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rows() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rows(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get valid() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set valid(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\forms\item.svelte generated by Svelte v3.36.0 */
const file$1 = "src\\components\\forms\\item.svelte";

// (98:6) {:else}
function create_else_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Update Item");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Update Item");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(98:6) {:else}",
		ctx
	});

	return block;
}

// (96:6) {#if status === 'store'}
function create_if_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Add Item");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Add Item");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(96:6) {#if status === 'store'}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let form;
	let field0;
	let updating_value;
	let t0;
	let field1;
	let updating_value_1;
	let t1;
	let field2;
	let updating_value_2;
	let t2;
	let field3;
	let updating_value_3;
	let t3;
	let div;
	let button;
	let t4;
	let a;
	let t5;
	let current;
	let mounted;
	let dispose;

	function field0_value_binding(value) {
		/*field0_value_binding*/ ctx[4](value);
	}

	let field0_props = {
		name: "name",
		label: "Name",
		type: "text"
	};

	if (/*data*/ ctx[0].name !== void 0) {
		field0_props.value = /*data*/ ctx[0].name;
	}

	field0 = new Field({ props: field0_props, $$inline: true });
	binding_callbacks.push(() => bind(field0, "value", field0_value_binding));

	function field1_value_binding(value) {
		/*field1_value_binding*/ ctx[5](value);
	}

	let field1_props = {
		name: "desc",
		label: "Description",
		type: "textarea",
		rows: "3"
	};

	if (/*data*/ ctx[0].description !== void 0) {
		field1_props.value = /*data*/ ctx[0].description;
	}

	field1 = new Field({ props: field1_props, $$inline: true });
	binding_callbacks.push(() => bind(field1, "value", field1_value_binding));

	function field2_value_binding(value) {
		/*field2_value_binding*/ ctx[6](value);
	}

	let field2_props = {
		name: "price",
		label: "Price",
		type: "number"
	};

	if (/*data*/ ctx[0].price !== void 0) {
		field2_props.value = /*data*/ ctx[0].price;
	}

	field2 = new Field({ props: field2_props, $$inline: true });
	binding_callbacks.push(() => bind(field2, "value", field2_value_binding));

	function field3_value_binding(value) {
		/*field3_value_binding*/ ctx[7](value);
	}

	let field3_props = {
		name: "stock",
		label: "Stock",
		type: "number"
	};

	if (/*data*/ ctx[0].stock !== void 0) {
		field3_props.value = /*data*/ ctx[0].stock;
	}

	field3 = new Field({ props: field3_props, $$inline: true });
	binding_callbacks.push(() => bind(field3, "value", field3_value_binding));

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[1] === "store") return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			form = element("form");
			create_component(field0.$$.fragment);
			t0 = space();
			create_component(field1.$$.fragment);
			t1 = space();
			create_component(field2.$$.fragment);
			t2 = space();
			create_component(field3.$$.fragment);
			t3 = space();
			div = element("div");
			button = element("button");
			if_block.c();
			t4 = space();
			a = element("a");
			t5 = text("Reset");
			this.h();
		},
		l: function claim(nodes) {
			form = claim_element(nodes, "FORM", { class: true, novalidate: true });
			var form_nodes = children(form);
			claim_component(field0.$$.fragment, form_nodes);
			t0 = claim_space(form_nodes);
			claim_component(field1.$$.fragment, form_nodes);
			t1 = claim_space(form_nodes);
			claim_component(field2.$$.fragment, form_nodes);
			t2 = claim_space(form_nodes);
			claim_component(field3.$$.fragment, form_nodes);
			t3 = claim_space(form_nodes);
			div = claim_element(form_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			button = claim_element(div_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			if_block.l(button_nodes);
			button_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			a = claim_element(div_nodes, "A", { class: true });
			var a_nodes = children(a);
			t5 = claim_text(a_nodes, "Reset");
			a_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			form_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "type", "submit");
			attr_dev(button, "class", "btn btn-primary");
			add_location(button, file$1, 92, 4, 2175);
			attr_dev(a, "class", "btn btn-danger");
			add_location(a, file$1, 101, 4, 2355);
			attr_dev(div, "class", "mt-4 d-flex justify-content-between");
			add_location(div, file$1, 91, 2, 2120);
			attr_dev(form, "class", "needs-validation");
			form.noValidate = true;
			add_location(form, file$1, 69, 0, 1628);
		},
		m: function mount(target, anchor) {
			insert_dev(target, form, anchor);
			mount_component(field0, form, null);
			append_dev(form, t0);
			mount_component(field1, form, null);
			append_dev(form, t1);
			mount_component(field2, form, null);
			append_dev(form, t2);
			mount_component(field3, form, null);
			append_dev(form, t3);
			append_dev(form, div);
			append_dev(div, button);
			if_block.m(button, null);
			append_dev(div, t4);
			append_dev(div, a);
			append_dev(a, t5);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*resetForm*/ ctx[3], false, false, false),
					listen_dev(
						form,
						"submit",
						prevent_default(function () {
							if (is_function(/*submit*/ ctx[2])) /*submit*/ ctx[2].apply(this, arguments);
						}),
						false,
						true,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			const field0_changes = {};

			if (!updating_value && dirty & /*data*/ 1) {
				updating_value = true;
				field0_changes.value = /*data*/ ctx[0].name;
				add_flush_callback(() => updating_value = false);
			}

			field0.$set(field0_changes);
			const field1_changes = {};

			if (!updating_value_1 && dirty & /*data*/ 1) {
				updating_value_1 = true;
				field1_changes.value = /*data*/ ctx[0].description;
				add_flush_callback(() => updating_value_1 = false);
			}

			field1.$set(field1_changes);
			const field2_changes = {};

			if (!updating_value_2 && dirty & /*data*/ 1) {
				updating_value_2 = true;
				field2_changes.value = /*data*/ ctx[0].price;
				add_flush_callback(() => updating_value_2 = false);
			}

			field2.$set(field2_changes);
			const field3_changes = {};

			if (!updating_value_3 && dirty & /*data*/ 1) {
				updating_value_3 = true;
				field3_changes.value = /*data*/ ctx[0].stock;
				add_flush_callback(() => updating_value_3 = false);
			}

			field3.$set(field3_changes);

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			transition_in(field3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			transition_out(field3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(form);
			destroy_component(field0);
			destroy_component(field1);
			destroy_component(field2);
			destroy_component(field3);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Item", slots, []);
	let dispatch = createEventDispatcher();
	let { status = "store" } = $$props;

	let { data = {
		"name": "",
		"description": "",
		"price": "",
		"stock": ""
	} } = $$props;

	let submit;

	const storeItem = async () => {
		let method = status === "store" ? "post" : "put";

		let url = status === "store"
		? "http://127.0.0.1:8000/api/items"
		: `http://127.0.0.1:8000/api/items/${data.id}`;

		const res = await fetch(url, {
			method,
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify(data)
		});

		const json = await res.json();
		$$invalidate(0, data = json.data);

		if (status === "store") {
			dispatch("add", data);
		} else {
			dispatch("updated", data);
		}

		resetForm();
	};

	const resetForm = () => {
		$$invalidate(0, data = {
			"name": "",
			"description": "",
			"price": "",
			"stock": ""
		});

		dispatch("reset");
	};

	onMount(async () => {
		$$invalidate(2, submit = () => {
			var forms = document.querySelectorAll(".needs-validation");

			Array.prototype.slice.call(forms).forEach(function (form) {
				if (!form.checkValidity()) {
					event.preventDefault();
					event.stopPropagation();
					form.classList.add("was-validated");
				} else {
					storeItem();
					form.classList.remove("was-validated");
				}
			});
		});
	});

	const writable_props = ["status", "data"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Item> was created with unknown prop '${key}'`);
	});

	function field0_value_binding(value) {
		if ($$self.$$.not_equal(data.name, value)) {
			data.name = value;
			$$invalidate(0, data);
		}
	}

	function field1_value_binding(value) {
		if ($$self.$$.not_equal(data.description, value)) {
			data.description = value;
			$$invalidate(0, data);
		}
	}

	function field2_value_binding(value) {
		if ($$self.$$.not_equal(data.price, value)) {
			data.price = value;
			$$invalidate(0, data);
		}
	}

	function field3_value_binding(value) {
		if ($$self.$$.not_equal(data.stock, value)) {
			data.stock = value;
			$$invalidate(0, data);
		}
	}

	$$self.$$set = $$props => {
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
	};

	$$self.$capture_state = () => ({
		Field,
		onMount,
		createEventDispatcher,
		dispatch,
		status,
		data,
		submit,
		storeItem,
		resetForm
	});

	$$self.$inject_state = $$props => {
		if ("dispatch" in $$props) dispatch = $$props.dispatch;
		if ("status" in $$props) $$invalidate(1, status = $$props.status);
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
		if ("submit" in $$props) $$invalidate(2, submit = $$props.submit);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		data,
		status,
		submit,
		resetForm,
		field0_value_binding,
		field1_value_binding,
		field2_value_binding,
		field3_value_binding
	];
}

class Item$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { status: 1, data: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Item",
			options,
			id: create_fragment$1.name
		});
	}

	get status() {
		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set status(value) {
		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get data() {
		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\admin\item.svelte generated by Svelte v3.36.0 */
const file = "src\\routes\\admin\\item.svelte";

function create_fragment(ctx) {
	let t0;
	let div7;
	let div6;
	let div2;
	let div1;
	let div0;
	let itemtable;
	let t1;
	let div5;
	let div4;
	let div3;
	let itemform;
	let current;

	itemtable = new Item$2({
			props: { items: /*items*/ ctx[0] },
			$$inline: true
		});

	itemtable.$on("remove", /*handleRemove*/ ctx[4]);
	itemtable.$on("update", /*handleUpdate*/ ctx[5]);

	itemform = new Item$1({
			props: {
				status: /*status*/ ctx[2],
				data: /*data*/ ctx[1]
			},
			$$inline: true
		});

	itemform.$on("add", /*handleAdd*/ ctx[3]);
	itemform.$on("updated", /*handleUpdated*/ ctx[6]);
	itemform.$on("reset", /*handleReset*/ ctx[7]);

	const block = {
		c: function create() {
			t0 = space();
			div7 = element("div");
			div6 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			create_component(itemtable.$$.fragment);
			t1 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");
			create_component(itemform.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-r5rsx8\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(itemtable.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t1 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(itemform.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Item";
			attr_dev(div0, "class", "card-body");
			add_location(div0, file, 65, 8, 1434);
			attr_dev(div1, "class", "card shadow mb-4 svelte-1jtad21");
			add_location(div1, file, 64, 6, 1394);
			attr_dev(div2, "class", "col-md-8 col-sm-12");
			add_location(div2, file, 63, 4, 1354);
			attr_dev(div3, "class", "card-body");
			add_location(div3, file, 72, 8, 1667);
			attr_dev(div4, "class", "card shadow mb-4 svelte-1jtad21");
			add_location(div4, file, 71, 6, 1627);
			attr_dev(div5, "class", "col-md-4 col-sm-12");
			add_location(div5, file, 70, 4, 1587);
			attr_dev(div6, "class", "row");
			add_location(div6, file, 62, 2, 1331);
			attr_dev(div7, "class", "container");
			add_location(div7, file, 61, 0, 1304);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div7, anchor);
			append_dev(div7, div6);
			append_dev(div6, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			mount_component(itemtable, div0, null);
			append_dev(div6, t1);
			append_dev(div6, div5);
			append_dev(div5, div4);
			append_dev(div4, div3);
			mount_component(itemform, div3, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const itemtable_changes = {};
			if (dirty & /*items*/ 1) itemtable_changes.items = /*items*/ ctx[0];
			itemtable.$set(itemtable_changes);
			const itemform_changes = {};
			if (dirty & /*status*/ 4) itemform_changes.status = /*status*/ ctx[2];
			if (dirty & /*data*/ 2) itemform_changes.data = /*data*/ ctx[1];
			itemform.$set(itemform_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(itemtable.$$.fragment, local);
			transition_in(itemform.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(itemtable.$$.fragment, local);
			transition_out(itemform.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div7);
			destroy_component(itemtable);
			destroy_component(itemform);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const res = await this.fetch("http://127.0.0.1:8000/api/items");
	const data = await res.json();

	if (res.status === 200) {
		return { message: data.message, items: data.data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Item", slots, []);
	let { items = [] } = $$props;
	let data;
	let status;

	const handleAdd = e => {
		let item = e.detail;
		$$invalidate(0, items = [...items, item]);
	};

	const handleRemove = e => {
		$$invalidate(0, items = items.filter(item => item.id != e.detail));
	};

	const handleUpdate = e => {
		$$invalidate(1, data = e.detail.item);
		$$invalidate(2, status = e.detail.status);
	};

	const handleUpdated = e => {
		let currentItem = items.filter(item => item.id == e.detail.id);

		$$invalidate(0, items = items.map(item => {
			if (JSON.stringify(item) === JSON.stringify(currentItem[0])) {
				return e.detail;
			} else {
				return item;
			}
		}));

		$$invalidate(2, status = "store");
	};

	const handleReset = () => {
		$$invalidate(2, status = "store");
	};

	const writable_props = ["items"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Item> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
	};

	$$self.$capture_state = () => ({
		preload,
		ItemTable: Item$2,
		ItemForm: Item$1,
		items,
		data,
		status,
		handleAdd,
		handleRemove,
		handleUpdate,
		handleUpdated,
		handleReset
	});

	$$self.$inject_state = $$props => {
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("data" in $$props) $$invalidate(1, data = $$props.data);
		if ("status" in $$props) $$invalidate(2, status = $$props.status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		items,
		data,
		status,
		handleAdd,
		handleRemove,
		handleUpdate,
		handleUpdated,
		handleReset
	];
}

class Item extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { items: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Item",
			options,
			id: create_fragment.name
		});
	}

	get items() {
		throw new Error("<Item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Item;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
